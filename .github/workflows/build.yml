# This is a basic workflow to help you get started with Actions

name: build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # For cache
      - name: CacheBrane
        id: cache_brane
        uses: actions/cache@v2
        env:
          cache-name: cache-brane
        with:
          path: ~/brane
          key: ${{ runner.os }}-build-${{env.cache-name}}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('package.json') }}
          restore-keys:
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Runs a single command using the runners shell
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      

      - name: Docker Set up the repository
        run : |
          sudo apt-get update
          sudo apt-get install ca-certificates curl gnupg lsb-release
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          
      - name: Docker Install Docker Engine
        run : |    
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
          sudo apt-get install docker-ce=5:20.10.16~3-0~ubuntu-focal docker-ce-cli=5:20.10.16~3-0~ubuntu-focal containerd.io docker-compose-plugin
      - name: Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      - name: Set up Docker Buildx
        run: |
          cd ~
          git clone https://github.com/docker/buildx.git && cd buildx
          make install
          docker buildx install
          docker buildx create --use
      
      - name: Set up brane CLI
        if: steps.cache_brane.outputs.cache-hit == 'true' 
        run: |
          cd ~/brane
          sudo cp ./target/release/brane /usr/local/bin/brane
          sudo chmod +x /usr/local/bin/brane
          brane version
      
      - name: Install brane CLI
        if: steps.cache_brane.outputs.cache-hit != 'true'
        run: |
          cd ~
          git clone https://github.com/epi-project/brane.git && cd brane
          chmod +x ./make.sh
          ./make.sh cli
          cp -iv ./contrib/config/infra-local.yml ./infra.yml
          sudo cp ./target/release/brane /usr/local/bin/brane
          sudo chmod +x /usr/local/bin/brane
          brane version
          
      - name: Build the brane package
        run: |
          brane build container.yml
        
      - name: Import process package
        shell: bash
        run: |
          (set -o pipefail && echo "import process;" | brane repl -c)
        
        
        
        
